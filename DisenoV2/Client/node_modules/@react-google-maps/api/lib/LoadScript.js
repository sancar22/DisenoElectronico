"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var injectscript_1 = require("./utils/injectscript");
var prevent_google_fonts_1 = require("./utils/prevent-google-fonts");
var isbrowser_1 = require("./utils/isbrowser");
var cleaningUp = false;
var DefaultLoadingElement = function () { return (React.createElement("div", null, "Loading...")); };
var LoadScript = (function (_super) {
    __extends(LoadScript, _super);
    function LoadScript() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.check = React.createRef();
        _this.state = {
            loaded: false
        };
        _this.cleanupCallback = function () {
            delete window.google;
            _this.injectScript();
        };
        _this.isCleaningUp = function () { return __awaiter(_this, void 0, void 0, function () {
            function promiseCallback(resolve) {
                if (!cleaningUp) {
                    resolve();
                }
                else {
                    if (isbrowser_1.isBrowser) {
                        var timer_1 = window.setInterval(function interval() {
                            if (!cleaningUp) {
                                window.clearInterval(timer_1);
                                resolve();
                            }
                        }, 1);
                    }
                }
            }
            return __generator(this, function (_a) {
                return [2, new Promise(promiseCallback)];
            });
        }); };
        _this.cleanup = function () {
            cleaningUp = true;
            var script = document.getElementById(_this.props.id);
            if (script && script.parentNode) {
                script.parentNode.removeChild(script);
            }
            Array.prototype.slice
                .call(document.getElementsByTagName("script"))
                .filter(function filter(script) {
                return script.src.includes("maps.googleapis");
            })
                .forEach(function forEach(script) {
                if (script.parentNode) {
                    script.parentNode.removeChild(script);
                }
            });
            Array.prototype.slice
                .call(document.getElementsByTagName("link"))
                .filter(function filter(link) {
                link.href ===
                    "https://fonts.googleapis.com/css?family=Roboto:300,400,500,700|Google+Sans";
            })
                .forEach(function forEach(link) {
                if (link.parentNode) {
                    link.parentNode.removeChild(link);
                }
            });
            Array.prototype.slice
                .call(document.getElementsByTagName("style"))
                .filter(function filter(style) {
                return style.innerText.includes(".gm-");
            })
                .forEach(function forEach(style) {
                if (style.parentNode) {
                    style.parentNode.removeChild(style);
                }
            });
        };
        _this.injectScript = function () {
            if (_this.props.preventGoogleFontsLoading) {
                prevent_google_fonts_1.preventGoogleFonts();
            }
            var params = ["key=" + _this.props.googleMapsApiKey];
            if (_this.props.version) {
                params.push("v=" + _this.props.version);
            }
            if (_this.props.language) {
                params.push("language=" + _this.props.language);
            }
            if (_this.props.region) {
                params.push("region=" + _this.props.region);
            }
            if (_this.props.libraries && _this.props.libraries.length) {
                params.push("&libraries=" + _this.props.libraries.join(","));
            }
            var injectScriptOptions = {
                id: _this.props.id,
                url: "https://maps.googleapis.com/maps/api/js?" + params.join('&')
            };
            injectscript_1.injectScript(injectScriptOptions)
                .then(function () {
                if (_this.props.onLoad) {
                    _this.props.onLoad();
                }
                _this.setState(function setLoaded() {
                    return {
                        loaded: true
                    };
                });
            })
                .catch(function (err) {
                if (_this.props.onError) {
                    _this.props.onError(err);
                }
                console.error("\n          There has been an Error with loading Google Maps API script, please check that you provided correct google API key to <LoadScript /> (" + _this.props.googleMapsApiKey + ")\n          Otherwise it is a Network issues.\n        ");
            });
        };
        return _this;
    }
    LoadScript.prototype.componentDidMount = function () {
        if (isbrowser_1.isBrowser) {
            if (window.google && !cleaningUp) {
                console.error("google api is already presented");
                return;
            }
            this.isCleaningUp().then(this.injectScript);
        }
    };
    LoadScript.prototype.componentDidUpdate = function (prevProps) {
        if (this.props.libraries !== prevProps.libraries) {
            console.warn('Performance warning! Loadscript has been reloaded unintentionally! You should not pass `libraries` prop as new array. Please keep an array of libraries as static class property for Components and PureComponents, or just a const variable ounside of component, or somwhere in config files or ENV variables');
        }
        if (isbrowser_1.isBrowser &&
            prevProps.language !== this.props.language) {
            this.cleanup();
            this.setState(function setLoaded() {
                return {
                    loaded: false
                };
            }, this.cleanupCallback);
        }
    };
    LoadScript.prototype.componentWillUnmount = function () {
        var _this = this;
        if (isbrowser_1.isBrowser) {
            this.cleanup();
            var timeoutCallback = function () {
                if (!_this.check.current) {
                    delete window.google;
                    cleaningUp = false;
                }
            };
            setTimeout(timeoutCallback, 1);
            if (this.props.onUnmount) {
                this.props.onUnmount();
            }
        }
    };
    LoadScript.prototype.render = function () {
        return (React.createElement(React.Fragment, null,
            React.createElement("div", { ref: this.check }),
            this.state.loaded
                ? this.props.children
                : (this.props.loadingElement || React.createElement(DefaultLoadingElement, null))));
    };
    LoadScript.defaultProps = {
        id: 'script-loader',
        version: 'weekly',
    };
    return LoadScript;
}(React.PureComponent));
exports.default = LoadScript;
